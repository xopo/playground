interface DataEntry {
    name: 'John' | 'Sparky' | 'Nova' | 'Manuel' | 'Caesar' | 'Gill' | 'Billy' | 'Silly';
    type: 'dog' | 'cat' | 'fish' | 'bug' | 'bird';
};

const data1: Array<DataEntry> = [
    {
        "name": "John",
        "type": "dog"
    },
        {
        "name": "Sparky",
        "type": "dog"
    },
        {
        "name": "Nova",
        "type": "cat"
    },
        {
        "name": "Manuel",
        "type": "dog"
    },
        {
        "name": "Caesar",
        "type": "cat"
    },
        {
        "name": "Gill",
        "type": "fish"
    }
];

const data2: Array<DataEntry> = [
    {
        "name": "John",
        "type": "dog"
    },
        {
        "name": "Sparky",
        "type": "dog"
    },
    {
        "name": "Silly",
        "type": "bug"
    },
        {
        "name": "Billy",
        "type": "bird"
    }
]

interface OutputEntry {
    type: string;
    animals: Array<string>;
}


const groupByType = (ar: Array<DataEntry>) => {
    return ar.reduce((acc:Array<OutputEntry>, element:DataEntry): Array<OutputEntry> => {
        const position = acc.findIndex((entry:OutputEntry) => entry.type === element.type);
        if (position === -1) {
            acc.push({
                type: element.type,
                animals: [element.name]
            })
        } else {
            acc[position].animals.push(element.name);
        };
        return acc;
    }, [] as Array<OutputEntry>);
}

// 1 - group by type
const elements = groupByType(data1);
console.log(elements);

// 2 - data intersection
const intersection = (ar1: Array<DataEntry>, ar2: Array<DataEntry>): Array<DataEntry>  => {
    return ar1.reduce((acc: Array<DataEntry>, el1: DataEntry): Array<DataEntry>  => {
        const result: DataEntry | void =  ar2.find((el2: DataEntry): any => el2.name === el1.name && el2.type === el1.type);
        if (result) {
            acc.push(result);
        }

        return acc;
    }, [] as Array<DataEntry>);
};

console.log( intersection(data1, data2));

// 3 - generate a csv
const CSVFormater = (content: Array<Array<string>>): string => {
    const result = content.map((line: Array<string>): string => line.join(','));

    return result.join('\n')
};

const CSVGeneartor = (ar: Array<DataEntry>): string => {
    if (ar.length === 0) {
        return '';
    }

    const header = Object.keys(ar[0]);
    const content = [];
    content.push(header);
    ar.forEach((el: DataEntry): void => {
        content.push(Object.values(el));
    });

    return CSVFormater(content);
}

console.log('---', CSVGeneartor(data1));


// 4. Create a function that can only run once and throws if it gets called again.
const boom = (function(): Function {
    let done = false;
    return function(): void {
        if(!done) {
            done = true;
            console.log('\nFirst and only execution');
        } else {
           throw new Error('\tYou cannot execute boom twice... chosed by design');
        }
    }
})();
boom();
// boom();

// 5. Create a function that is given a set of functions and a set of data which are inputs for those functions and returns the one that finished the fastest out of them, displaying ms time

type AR = Array<number>;

const f1 = (ar: AR): AR => ar.map(el => el > 5 ? el + 1 : el - 1);

const f2 = (ar: AR): AR => {
    const unord = ar.map(el => el > 5 ? el + 1 : el - 1);
    unord.sort();
    return unord;
}

const f3 = (ar: AR): AR => {
    ar.sort();
    const unord = ar.map(el => el > 5 ? el + 1 : el - 1);
    unord.sort();
    return unord;
}

const rand:AR = [15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48, 15, 30, 80, 68, 73, 26, 53, 62, 66, 51, 29, 39, 18, 9, 4, 17, 84, 89, 1, 28, 13, 44, 49, 92, 97, 63, 2, 65, 93, 10, 69, 91, 76, 0, 36, 46, 47, 90, 41, 33, 23, 56, 8, 24, 52, 32, 71, 70, 60, 94, 75, 35, 38, 27, 77, 19, 55, 14, 3, 83, 59, 79, 11, 98, 45, 67, 86, 42, 20, 12, 5, 96, 40, 31, 57, 21, 6, 81, 25, 34, 78, 72, 64, 43, 99, 87, 54, 74, 82, 22, 16, 50, 7, 95, 58, 85, 61, 88, 37, 48];

type ScoreTable = {
    name: string,
    score: number,
    function: Function
};

const getFastest = (score1: ScoreTable, score2: ScoreTable): number => {
    return score1.score - score2.score;
}

type Testable = (ar: AR) => AR;
const testFn = (fnArray: Array<Testable>, rand: AR): ScoreTable => {
    const scoreList: Array<ScoreTable> = [];
    fnArray.forEach((fnc: Testable): void => {
        const data = [...rand];
        const start: number = new Date().getTime() as number;
        fnc(data);
        const end: number = new Date().getTime() as number;
        scoreList.push({
            name: fnc.name,
            score: end - start,
            function: fnc
        });
    });
    console.log(scoreList);
    scoreList.sort(getFastest)
    return scoreList[0];
};

console.log('the winer is:', testFn([f3, f2, f1], rand));
